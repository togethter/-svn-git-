svn服务器创建app项目的仓库，假设是Product 则在该文件夹下有三个子文件夹 （branches&tags&trunk）branche 代表分支 tags 代表备份 trunk代表主干

01 某开发团队，开发一款app MOO 命名1.0版本，发布到appStore + 备份
02 因市场反馈良好，因此该团队决定开发2.0版本
03 开发团队开发2.0版本
04当2.0版本开发到中途的时候，这个时候市场人员反馈已经上架的1.0版本中存在重大bug，需要马上修复
05开发人员会指派固定人员去修复1.0版本中存在的bug，并且尽快上架完成替换
06指派的人员，应该根据之前的备份的1.0版本来创建一个分支，在分支中修复bug
07当分支中bug修复完成了之后，把该版本命名为1.1版本，发布到appstore + 备份
08在主干上合并分支，解决当前正在开发的2.0版本中存在的同样的bug
09删除分支，继续开发2.0本


// 开发到1.0发布到AppStore+备份tag
点击远程的仓库，找到项目，右键选择tag，Tag As(选择备份的名称(MOMO1.0版本),where (选择保存到什么位置，保存到tags文件下，Revision选择版本(很重要，选择对应的版本)，
点击create tag，描写信息(MOMO1.0版本，尽量写得完整一些，描述做了哪些功能)

}
// 开发2.0版本的过程中，发现1.0版本中有一个重大bug，需要修复
点击远程仓库，找到项目对应版本的Tags备份，点击右键，选择Branc，然后在Branch As 填写分支的名字(MOMO1.0fixbug)，where 选择分支放在哪一个文件夹下（选择放在branches文件夹下)，
Revision然后选择版本(选择版本号)，点击create branche
填写分支的一些描述信息(MOMO1.0fixbug版本分支)，点击提交，多了一个分支，本地也是没有的(本地需要update更新获取分支)，在MOMO1.0fixbug分支下修复bug(其他团队继续在2.0基础下开发)
修复完MOMO1.0fixbug后发布到AppStore+备份，备份同上（在MOMO1.0fixbug下点击tag，然后完成备份）

// 合并分支
在主干上合并分支(因为主干上时基于1.0版本开发的),是在本地仓库下进行的,点击主干项目，点击merge,在merge from选择从哪里合并，点击merge changes(合并)，主干上的bug就解决了

// 删除分支
在本地仓库下点击branches文件夹下对应的分支，点击Delete删除分支，在commit(做一次提交)，填写描述信息(删除1.0fixbug分支)后，更新后提交。完成分支的删除。
最终tags文件夹下有两个分支MOMO1.0,MOMO1.1两个备份

// 在后在2.0版本下继续开发









